from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.generics import ListCreateAPIView, RetrieveUpdateDestroyAPIView, GenericAPIView, get_object_or_404
from rest_framework import mixins
from .models import Component, Hole
from .serializers import BasicComponentSerializer, BasicHoleSerializer, URLComponentSerializer
from rest_framework.reverse import reverse
import re


class CHRedirectView(APIView):
    def get(self, request, pkc, pkh):
        comp = Component.objects.get(pk=pkc)
        hole = comp.holes.get(pk=pkh)
        data ={'Location' : reverse('hole-detail-view', args=[pkh], request=request)}
        return Response(data = data, status= status.HTTP_302_FOUND, headers=data)


class ComponentsView(ListCreateAPIView):
    #'/components/'
    serializer_class = BasicComponentSerializer
    
    def get_queryset(self):
        page = self.request.query_params.get('page', 1)
        page_size = self.request.query_params.get('page_size', 20)
        return Component.objects.get_page(page = page, page_size = page_size)
       

class HolesView(ListCreateAPIView):
    #'/holes/'
    serializer_class = BasicHoleSerializer
    
    def get_queryset(self):
        page = self.request.query_params.get('page', 1)
        page_size = self.request.query_params.get('page_size', 20)
        return Hole.objects.get_page(page = page, page_size = page_size)
  

class HoleDetail(RetrieveUpdateDestroyAPIView):
    queryset = Hole.objects.all()
    serializer_class = BasicHoleSerializer


class ComponentDetail(RetrieveUpdateDestroyAPIView):
    queryset = Component.objects.all()
    
    def get_serializer_class(self):
        """
        Return the class to use for the serializer.
        Defaults to using `self.serializer_class`.
        You may want to override this if you need to provide different
        serializations depending on the incoming request.
        (Eg. admins get full serialization, others get basic serialization)
            
            ~rest-framework github source code
        """
        if self.request.method == 'GET':
            return URLComponentSerializer
        else:
            return BasicComponentSerializer

class ComponentDetailHoles(APIView):
   #'components/<pk>/holes/'
   #!REFACTOR
    def get_object(self, pk):
        try:
            return Component.objects.get(pk=pk)
        except Component.DoesNotExist:
            raise Http404
    
    def get_hole(self, pk):
        try:
            return Hole.objects.get(pk=pk)
        except Hole.DoesNotExist:
            raise Http404
        
    def get(self, request, pk):
        component = self.get_object(pk)
        holes = component.holes.all()
        serializer = BasicHoleSerializer(holes, many=True)
        return Response(serializer.data)

    def post(self, request, pk):
        component = self.get_object(pk)
        hole_id = request.data['id']
        hole = self.get_hole(hole_id)
        component.holes.add(hole)
        return Response(status = status.HTTP_202_ACCEPTED)

    def delete(self, request, pk):
        component = self.get_object(pk)
        hole_id = request.data['id']
        hole = self.get_hole(hole_id)
        component.holes.remove(hole)
        return Response(status = status.HTTP_202_ACCEPTED)