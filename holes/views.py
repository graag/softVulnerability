from django.shortcuts import render
from rest_framework.views import APIView
from rest_framework.response import Response
from .models import Component, Hole
from .serializers import BasicComponentSerializer, BasicHoleSerializer, URLComponentSerializer
from django.http import Http404
from rest_framework import status
import re
# Create your views here.

class ComponentsView(APIView):
    #'/components/'
    def get(self, request):
        page = request.query_params.get('page', None)
        page_size = request.query_params.get('page_size', None)
        if (page or page_size):
            page = page or str(1)
            page_size = page_size or str(10)
            start_index = (int(page) - 1) * int(page_size)
            end_index = start_index + int(page_size)
            components = Component.objects.all().order_by('id')[start_index : end_index]
            if not components:
                return Response(status=status.HTTP_204_NO_CONTENT)
        else:    
            components = Component.objects.all().order_by('id')
        serializer = BasicComponentSerializer(components, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = BasicComponentSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class HolesView(APIView):
    #'/holes/'
    def get(self, request):
        page = request.query_params.get('page', None)
        page_size = request.query_params.get('page_size', None)
        if (page or page_size):
            page = page or str(1)
            page_size = page_size or str(10)
            start_index = (int(page) - 1) * int(page_size)
            end_index = start_index + int(page_size)
            holes = Hole.objects.all().order_by('id')[start_index : end_index]
            if not holes:
                return Response(status=status.HTTP_204_NO_CONTENT)
        else:    
            holes = Hole.objects.all().order_by('id')
        serializer = BasicHoleSerializer(holes, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = BasicHoleSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class HoleDetail(APIView):
    #'holes/<pk>/'
    def get_object(self, pk):
        try:
            return Hole.objects.get(pk=pk)
        except Hole.DoesNotExist:
            raise Http404

    def get(self, request, pk):
        hole = self.get_object(pk)
        serializer = BasicHoleSerializer(hole)
        return Response(serializer.data)
    
    def patch(self, request, pk):
        hole = self.get_object(pk)
        serializer = BasicHoleSerializer(hole, data = request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status = status.HTTP_202_ACCEPTED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        #202
        hole = self.get_object(pk)
        hole.delete()
        return Response(status = status.HTTP_202_ACCEPTED)

class ComponentDetail(APIView):
    #'/components/<pk>/'
    def get_object(self, pk):
        try:
            return Component.objects.get(pk=pk)
        except Component.DoesNotExist:
            raise Http404
    
    def get(self, request, pk):
        component = self.get_object(pk)
        serializer = URLComponentSerializer(component, context={'request': request})
        return Response(serializer.data)

    def patch(self, request, pk):
        component = self.get_object(pk)
        serializer = BasicComponentSerializer(component, data = request.data, partial=True)
        if serializer.is_valid() :
            serializer.save()
            return Response(serializer.data, status = status.HTTP_202_ACCEPTED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        #202
        component = self.get_object(pk)
        component.delete()
        return Response(status = status.HTTP_202_ACCEPTED)

class ComponentDetailHoles(APIView):
   #'components/<pk>/holes/'
    def get_object(self, pk):
        try:
            return Component.objects.get(pk=pk)
        except Component.DoesNotExist:
            raise Http404
    
    def get_hole(self, pk):
        try:
            return Hole.objects.get(pk=pk)
        except Hole.DoesNotExist:
            raise Http404
        
    def get(self, request, pk):
        component = self.get_object(pk)
        holes = component.holes.all()
        serializer = BasicHoleSerializer(holes, many=True)
        return Response(serializer.data)

    def post(self, request, pk):
        component = self.get_object(pk)
        hole_id = request.data['id']
        hole = self.get_hole(hole_id)
        component.holes.add(hole)
        return Response(status = status.HTTP_202_ACCEPTED)

    def delete(self, request, pk):
        component = self.get_object(pk)
        hole_id = request.data['id']
        hole = self.get_hole(hole_id)
        component.holes.remove(hole)
        return Response(status = status.HTTP_202_ACCEPTED)