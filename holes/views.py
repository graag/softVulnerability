from rest_framework import mixins, status, exceptions, views, generics
from rest_framework.generics import get_object_or_404
from rest_framework.response import Response
from rest_framework.reverse import reverse

from .models import Component, Hole
from . import serializers

import re


class CHRedirectView(views.APIView):
    def get(self, request, pkc, pkh):
        comp = Component.objects.get(pk=pkc)
        hole = comp.holes.get(pk=pkh)
        data ={'Location' : reverse('hole-detail', args=[pkh], request=request)}
        return Response(data = data, status= status.HTTP_302_FOUND, headers=data)


class ComponentsView(generics.ListCreateAPIView):
    '''
        /components/
        ListCreateApiView uses:
            - mixins.ListModelMixin     (GET)
            - mixins.CreateModelMixin   (POST)
            - GenericAPIView

        mixins.ListModelMixin:
            * Uses get_queryset() and processes results with filter_queryset() and paginate_queryset() GenericAPIView's functions (filter_backends & pagination_class).
            * Uses get_serializer() (GenericApiView.serializer_class) to serialize retrieved data.

        mixins.CreateModelMixin:
            * Uses get_serializer() (GenericApiView.serializer_class) and calls is_valid(raise_exception=True) serializer method.
            * raise_exception=True will raise ValidationError. As a result, 400 Bad Request with error message will be returned.
            * Calls serializer's save() method via perform_create(). (perform_create() may be overriden to do additional work when initiating new object)

        '''
    serializer_class = serializers.BasicComponentSerializer
    
    def get_queryset(self):
        page = self.request.query_params.get('page', None)
        page_size = self.request.query_params.get('page_size', None)
        return Component.objects.get_page(page = page, page_size = page_size)
       

class HolesView(generics.ListCreateAPIView):
    '''
        /holes/
        Same as ComponentsView. Link?
    '''

    serializer_class = serializers.BasicHoleSerializer
    
    def get_queryset(self):
        page = self.request.query_params.get('page', None)
        page_size = self.request.query_params.get('page_size', None)
        return Hole.objects.get_page(page = page, page_size = page_size)
  

class HoleDetail(generics.RetrieveUpdateDestroyAPIView):
    '''
        /holes/<pk>/
        RetrieveUpdateDestroyAPIView uses:
            - mixins.RetrieveModelMixin     (GET)
            - mixins.UpdateModelMixin       (PUT, PATCH)
            - mixins.DestroyModelMixin      (DELETE)
            - GenericAPIView
        
        PUT - requires all object data.
        PATCH - partial update.

        mixins.RetrieveModelMixin:
            * Calls GenericAPIView.get_object() method.
                * Uses get_queryset() (queryset field) and lookup_field ('pk' as default) to find desired object.
                * Calls get_object_or_404() function.

            * Calls GenericAPIView.get_serializer() method.
                * Calls get_serializer_class(), by default this method returns GenericAPIView.serializer_class.
                * Returned serializer instance is already initiated and ready to provide serialized representation of object.

            * Returns Response() with data from serializer.

        mixins.UpdateModelMixin:
            * PATCH:
                * Calls partial_update() which adds 'partial' = True to keyword dictionary and calls update() (See PUT).

            * PUT:
                * Calls update() method.
                    * Uses get_object() method to retrieve object to update.
                    * Uses get_serializer() to initiate serializer with object and data to update.
                    * Performs two-step update
                        * Calls own perform_update method that may be overriden.
                        * By default perform_update calls serializer's save() method.

        mixins.DestroyModelMixin:
            * Calls GenericAPIView.get_object() method to retrieve desired object.
                * Returns 404 if get_object method fails.
            * Performs two step object deletion.
                * Calls DestroyModelMixin.perform_destroy() that can be overriden if additional work should be done while deleting object.
                * Calls Mode.delete().
    '''
    queryset = Hole.objects.all()
    serializer_class = serializers.UpdateHoleSerializer


class ComponentDetail(generics.RetrieveUpdateDestroyAPIView):
    '''
    /components/<pk>/
    Same as HoleDetail. Link?

    Overrides GenericAPIView.get_serializer_class() to use different serializers with GET and PATCH,PUT requests. 
    POST, PUT should not update object's ID (read_only_field=('id',)).
    GET 
    '''
    queryset = Component.objects.all()
    
    def get_serializer_class(self):
        """
        Return the class to use for the serializer.
        Defaults to using `self.serializer_class`.
        You may want to override this if you need to provide different
        serializations depending on the incoming request.
        (Eg. admins get full serialization, others get basic serialization)
            
            ~rest-framework github source code
        """
        if self.request.method == 'GET':
            return serializers.URLComponentSerializer
        else:
            return serializers.UpdateComponentSerializer

class ComponentDetailHolesRef(mixins.ListModelMixin,
                                mixins.CreateModelMixin,
                                mixins.DestroyModelMixin,
                                generics.GenericAPIView):
    '''
        /components/<pk>/holes/
            RetrieveUpdateDestroyAPIView uses:
                - mixins.ListModelMixin     (GET)
                - mixins.CreateModelMixin   (POST)
                - mixins.DestroyModelMixin  (DELETE)
                - GenericAPIView

            mixins.ListModelMixin:
                * default list() implementation.
                * Uses BasicHoleSerializer for serialization and Holes assigned to Component as queryset.
            
            mixins.CreateModelMixin (create()):
                * overriden create() method.
                * Uses self.get_object() to retrieve Component and get_object_or_404() to retrieve Hole object.
                * Raises ValidationError() (400_BAD_REQUEST)

            mixins.DestroyModelMixin:
                * By default, uses get_object() and delete() methods to remove object from database.
                * Uses teo step deletion process. First calls perform_destroy() then delete() method of retrieved object.
                * perform_destroy() recieves appropriate Component and removes Hole which id is provided in request arguments. 

        Description:

        Serializer  -> serializers.BasicHoleSerializer
        Queryset    -> All holes assigned to Component identified by <pk> in url.
        Object      -> Component identified by <pk> in url. 

        GET - returns all holes associated with component pointed by <pk> in url.
        POST - allows binding holes with component. Requires id in request arguments.
        DELETE - allows unbinding holes with component. Requires id in request arguments.
    '''

    #Just declaring own view. Each and every official generic view is declared according to this pattern.
    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)

    def delete(self, request, *args, **kwargs):
        return self.destroy(request, *args, **kwargs)
    #-----------------------------------------------------------------------------------------
    '''
        Serializing holes.
        Queryset    -> All holes assigned to Component identified by <pk> in url.
        Object      -> Component identified by <pk> in url.   
    '''
    serializer_class = serializers.BasicHoleSerializer

    def get_queryset(self):
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
        filter_kwargs = {self.lookup_field: self.kwargs[lookup_url_kwarg]}
        obj = get_object_or_404(Component.objects.all(), **filter_kwargs)
        queryset = obj.holes
        return queryset
    
    def get_object(self):
        queryset = Component.objects.all()
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
        filter_kwargs = {self.lookup_field: self.kwargs[lookup_url_kwarg]}
        obj = get_object_or_404(queryset, **filter_kwargs)
        return obj

    def get_hole(self, request):
        id = request.data.get('id', None)
        if not id:
            raise exceptions.ValidationError("Hole's id not provided within arguments.") 
        return get_object_or_404(Hole.objects.all(), **{'pk':id})
    #----------------------------------------------------------------------------------------- 
    #POST
    def create(self, request, *args, **kwargs):
        #self.get_object().holes.add(self.get_hole(request))        #??
        obj = self.get_object()                                     
        hole = self.get_hole(request)
        obj.holes.add(hole)
        return Response(status=status.HTTP_200_OK)

    #DELETE
    #def destroy(self, request, *args, **kwargs):
        #self.get_object().holes.remove(self.get_hole(request))     #??
     #   obj = self.get_object()
      #  hole = self.get_hole(request)
       # obj.holes.remove(hole)
        #return Response(status=status.HTTP_204_NO_CONTENT)

    def perform_destroy(self, instance):
        hole = self.get_hole(self.request)
        instance.holes.remove(hole)

