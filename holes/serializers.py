from rest_framework import serializers
from .models import Component, Hole
import re

class BasicComponentSerializer(serializers.ModelSerializer):
    '''
    Serializer details:
        BasicComponentSerializer():
            id = CharField(max_length=11, validators=[<UniqueValidator(queryset=Component.objects.all())>])
            producer = CharField(max_length=40)
            product = CharField(max_length=40)
            version = CharField(max_length=40)
            timestamp = DateTimeField(read_only=True)

        validate_id(self, value) is automatically called when new Component object is created.
            ""

    '''
    class Meta:
        model = Component
        fields=('__all__')

    def validate_id(self, value):
        p = re.compile('^[0-9]{4}/[0-9]{1,}$')
        if p.match(value) == None:
             raise serializers.ValidationError("Invalid ID format.")
        return value
        
class BasicComponentUpdateSerializer(serializers.ModelSerializer):
    '''
    Serializer details:
        BasicComponentSerializer():
            id = CharField(max_length=11, validators=[<UniqueValidator(queryset=Component.objects.all())>])
            producer = CharField(max_length=40)
            product = CharField(max_length=40)
            version = CharField(max_length=40)
            timestamp = DateTimeField(read_only=True)

        validate_id(self, value) is automatically called when new Component object is created.
            ""

    '''
    class Meta:
        model = Component
        fields=('__all__')
        read_only_fields=('id',)

    def validate_id(self, value):
        p = re.compile('^[0-9]{4}/[0-9]{1,}$')
        if p.match(value) == None:
             raise serializers.ValidationError("Invalid ID format.")
        return value

class BasicHoleSerializer(serializers.ModelSerializer):
    '''
        BasicHoleSerializer():
            id = CharField(max_length=11, validators=[<UniqueValidator(queryset=Hole.objects.all())>])
            description = CharField(style={'base_template': 'textarea.html'})
            timestamp = DateTimeField(read_only=True)

        validate_id(self, value) is automatically called when new Hole object is created.
    '''
    class Meta:
        model = Hole
        fields=('id', 'description', 'timestamp')

    def validate_id(self, value):
        p = re.compile('^[0-9]{4}/[0-9]{1,}$')
        if p.match(value) == None:
             raise serializers.ValidationError("Invalid ID format.")
        return value


class URLComponentSerializer(serializers.HyperlinkedModelSerializer):
    '''
        Used only in GET /components/<pk>/

        URLComponentSerializer():
            id = CharField(max_length=11, validators=[<UniqueValidator(queryset=Component.objects.all())>])
            holes = HyperlinkedRelatedField(many=True, queryset=Hole.objects.all(), view_name='hole-detail')
            producer = CharField(max_length=40)
            product = CharField(max_length=40)
            version = CharField(max_length=40)
            timestamp = DateTimeField(read_only=True)
    '''

    class Meta:
        model = Component
        fields=('id', 'holes', 'producer', 'product', 'version', 'timestamp')