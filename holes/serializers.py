from rest_framework import serializers
from .models import Component, Hole
import re

class BasicComponentSerializer(serializers.ModelSerializer):
    
    class Meta:
        model = Component
        fields=('__all__')
        read_only_fields = ('id',)

    def validate_id(self, value):
        p = re.compile('^[0-9]{4}/[0-9]{1,}$')
        if p.match(value) == None:
             raise serializers.ValidationError("Invalid ID format.")
        return value
        #ModelSerializer automatically calls this method and method to validate if id is unique.
                
class BasicHoleSerializer(serializers.ModelSerializer):
    
    class Meta:
        model = Hole
        fields=('__all__')
        read_only_fields = ('id',)

    def validate_id(self, value):
        p = re.compile('^[0-9]{4}/[0-9]{1,}$')
        if p.match(value) == None:
             raise serializers.ValidationError("Invalid ID format.")
        return value


class URLComponentSerializer(serializers.ModelSerializer):
    holes = serializers.HyperlinkedRelatedField(many=True, view_name='hole-detail-view', read_only=True)

    class Meta:
        model = Component
        fields=("__all__")