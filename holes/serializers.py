from rest_framework import serializers
from .models import Component, Hole
import re

class BasicComponentSerializer(serializers.Serializer):
    id = serializers.CharField(max_length = 11)
    producer = serializers.CharField(max_length = 40)
    product = serializers.CharField(max_length=40)
    version = serializers.CharField(max_length=40)

    def create(self, validated_data):
        return Component.objects.create(**validated_data)

    def update(self, instance, validated_data):
        instance.producer = validated_data.get('producer', instance.producer) 
        instance.product = validated_data.get('product', instance.product)
        instance.version = validated_data.get('version', instance.version)
        if validated_data.get('id', None) != None:
            raise serializers.ValidationError('ID provided within PATCH method.')
        instance.save()
        return instance

    def validate_id(self, value):
        #check for specific id format
        p = re.compile('^[0-9]{4}/[0-9]{1,}$')
        if p.match(value) == None:
             raise serializers.ValidationError("Invalid ID format.")
        else:
            #check if unique
            try:
                Component.objects.get(pk=value)
            except Component.DoesNotExist:
                return value
            else:
                raise serializers.ValidationError("ID already in DB.")
                
class BasicHoleSerializer(serializers.Serializer):
    id = serializers.CharField(max_length = 11)
    description = serializers.CharField(max_length = 120)

    def create(self, validated_data):
        return Hole.objects.create(**validated_data)

    def update(self, instance, validated_data):
        instance.description = validated_data.get('description', instance.description) 
        instance.save()
        return instance

    def validate_id(self, value):
        #check for specific id format
        p = re.compile('^[0-9]{4}/[0-9]{1,}$')
        if p.match(value) == None:
             raise serializers.ValidationError("Invalid ID format.")
        else:
            #check if unique
            try:
                Hole.objects.get(pk=value)
            except Hole.DoesNotExist:
                return value     
            else:
                raise serializers.ValidationError("ID already in DB.")
                

class URLComponentSerializer(serializers.Serializer):
    id = serializers.CharField(max_length = 11)
    producer = serializers.CharField(max_length = 40)
    product = serializers.CharField(max_length=40)
    version = serializers.CharField(max_length=40)
    holes = serializers.HyperlinkedRelatedField(many=True, view_name='hole-detail-view', read_only=True)