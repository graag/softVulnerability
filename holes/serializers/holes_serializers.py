from rest_framework import serializers
from holes.models import Component, Hole
import re

class BasicHoleSerializer(serializers.ModelSerializer):
    '''
        Used in GET, POST /holes/ and GET /component/<pk>/holes/

        BasicHoleSerializer():
            id = CharField(max_length=11, validators=[<UniqueValidator(queryset=Hole.objects.all())>])
            description = CharField(style={'base_template': 'textarea.html'})
            timestamp = DateTimeField(read_only=True)

        validate_id(self, value) is automatically called when new Hole object is created.
        UniqueValidator checks uniqueness of Holes' ids.
    '''
    class Meta:
        model = Hole
        fields=('id', 'description', 'timestamp')
        read_only_fields=('timestamp',)

    def validate_id(self, value):
        p = re.compile('^[0-9]{4}/[0-9]{1,}$')
        if p.match(value) == None:
             raise serializers.ValidationError("Invalid ID format.")
        return value

class UpdateHoleSerializer(serializers.ModelSerializer):
    '''
        Used in PUT, PATCH /holes/<pk>/

        BasicHoleSerializer():
            id = CharField(read_only=True)
            description = CharField(style={'base_template': 'textarea.html'})
            timestamp = DateTimeField(read_only=True)

        Had to create seperate serializer for (POST,GET) and (PUT, PATCH). (PUT, PATCH) should treat id field as read_only to prevent creating 'cloned' objects.
    '''
    class Meta:
        model = Hole
        fields=('id', 'description', 'timestamp')
        read_only_fields=('id','timestamp')
