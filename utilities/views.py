from django.shortcuts import render
from holes.models import Hole, Component
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
import random
c = ('Blue', 'Red', 'Green', 'White', 'Black')
producers = ('Soft', 'Software', 'IT', 'Studio', 'Company')
products = ('Prog', 'Programm','Game', 'Framework', 'Lib')


class RandGeneratorView(APIView):

    def delete(self, request):
        Hole.objects.all().delete()
        Component.objects.all().delete()
        return Response(status = status.HTTP_202_ACCEPTED)

    def get(self, request):
        components_count = request.query_params.get('components', None)
        holes_count = request.query_params.get('holes', None)
        response = "Holes: "
        if (components_count and holes_count):
            for i in range(0, int(holes_count)):
                hole = self.genHole()
                response += "'Hole: " + hole.id + "'; "
                hole.save()
            
            response += "    Components: "
            
            for i in range(0, int(components_count)):
                component = self.genComponent()
                response += "'" + str(component) + "'; "
                component.save()
            
            response += "    Bindings: "
            bindings = 0
            holes_ids = Hole.objects.values_list('id', flat=True)
            
            for component in Component.objects.all():
                bind_count = random.randint(0,5)
                hole_id = random.sample(list(holes_ids), bind_count)
                for id in hole_id:
                    component.holes.add(Hole.objects.get(pk=id))
                bindings += bind_count

            response += str(bindings)
            return Response(response)
        else:
            return Response("Specify 'components' and 'holes' params.")

    def rand_and_fill(self, cc, hc):
        return 0

    def genComponent(self):
        #Generate producer and product
        producer = random.choice(c) + random.choice(producers)
        product = random.choice(c) + random.choice(products)
        
        version_legth = random.randint(0,8)
        version = str(random.randint(1,20))
        for i in range(0, version_legth):
            version = version + "." + str(random.randint(0,20))

        id = self.unique_id_generator(Component)
        return Component(producer = producer, product = product, version = version, id = id)
    
    def genHole(self):
        description = 'Hole no.' + str(random.randint(0,10000))
        id = self.unique_id_generator(Hole)
        return Hole(description = description, id = id)

    def unique_id_generator(self, model):
        while True:
            year = random.randint(1980, 2050)
            number = random.randint(0, 99999)
            id = str(year) + "/" + str(number)
            try:
                model.objects.get(pk=id)
            except model.DoesNotExist:
                return id
                